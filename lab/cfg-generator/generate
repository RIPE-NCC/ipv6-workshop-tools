#!/bin/bash

# Go to my own directory
MY_DIR=$(dirname "$0")
cd "${MY_DIR}"
MY_DIR=$(pwd -P)

# Check command line
if [[ ("$1" != "v4" && "$1" != "v6" && "$1" != "dual" && "$1" != "6rd" && "$1" != "pre-6rd") || ("$2" != [1-9]) ]]; then
	echo "---------"
	echo "- Usage -"
	echo "---------"
	echo "$0 <mode> <POP-count>"
	echo ""
	echo "Where <mode> is 'v4', 'v6', '6rd', 'pre-6rd' or 'dual'"
	echo "Where <POP-count> is a number from 1 to 9"
	echo ""
	exit 1
fi

MODE="$1"
POP_COUNT="$2"

echo "----------------------------------------"
echo "- Generating configurations for ${POP_COUNT} POPs -"
echo "----------------------------------------"

function set_possible_matches() {
	local POP="$1"
	local POP_ID="POP${POP}"
	local ROUTER_ID="$2"
	
	# Determine filter conditions
	POSSIBLE_MATCHES=("${POP_ID}" "${POP_ID}-${ROUTER_ID}" "${ROUTER_ID}")
	for OTHER_POP in `seq 1 ${POP_COUNT}`; do
		if [[ "${OTHER_POP}" == "${POP}" ]]; then
			continue
		fi
		POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS" "${ROUTER_ID}-POP${OTHER_POP}EXISTS")
	done
	if [[ "${MODE}" == "6rd" ]]; then
		POSSIBLE_MATCHES+=("6rd" "${POP_ID}-6rd" "${POP_ID}-${ROUTER_ID}-6rd" "${ROUTER_ID}-6rd")
		for OTHER_POP in `seq 1 ${POP_COUNT}`; do
			if [[ "${OTHER_POP}" == "${POP}" ]]; then
				continue
			fi
			POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS-v4" "${ROUTER_ID}-POP${OTHER_POP}EXISTS-6rd")
		done
	fi
	if [[ "${MODE}" == "pre-6rd" ]]; then
		POSSIBLE_MATCHES+=("pre-6rd" "${POP_ID}-pre-6rd" "${POP_ID}-${ROUTER_ID}-pre-6rd" "${ROUTER_ID}-pre-6rd")
		for OTHER_POP in `seq 1 ${POP_COUNT}`; do
			if [[ "${OTHER_POP}" == "${POP}" ]]; then
				continue
			fi
			POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS-v4" "${ROUTER_ID}-POP${OTHER_POP}EXISTS-pre-6rd")
		done
	fi
	if [[ "${MODE}" == "v4" || "${MODE}" == "dual" || "${MODE}" == "6rd" || "${MODE}" == "pre-6rd" ]]; then
		POSSIBLE_MATCHES+=("v4" "${POP_ID}-v4" "${POP_ID}-${ROUTER_ID}-v4" "${ROUTER_ID}-v4")
		for OTHER_POP in `seq 1 ${POP_COUNT}`; do
			if [[ "${OTHER_POP}" == "${POP}" ]]; then
				continue
			fi
			POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS-v4" "${ROUTER_ID}-POP${OTHER_POP}EXISTS-v4")
		done
	fi
	if [[ "${MODE}" == "v6" || "${MODE}" == "dual" ]]; then
		POSSIBLE_MATCHES+=("v6" "${POP_ID}-v6" "${POP_ID}-${ROUTER_ID}-v6" "${ROUTER_ID}-v6")
		for OTHER_POP in `seq 1 ${POP_COUNT}`; do
			if [[ "${OTHER_POP}" == "${POP}" ]]; then
				continue
			fi
			POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS-v6" "${ROUTER_ID}-POP${OTHER_POP}EXISTS-v6")
		done
	fi
	if [[ "${MODE}" == "dual" ]]; then
		POSSIBLE_MATCHES+=("dual" "${POP_ID}-dual" "${POP_ID}-${ROUTER_ID}-dual" "${ROUTER_ID}-dual")
		for OTHER_POP in `seq 1 ${POP_COUNT}`; do
			if [[ "${OTHER_POP}" == "${POP}" ]]; then
				continue
			fi
			POSSIBLE_MATCHES+=("POP${OTHER_POP}EXISTS-dual" "${ROUTER_ID}-POP${OTHER_POP}EXISTS-dual")
		done
	fi
}

function process_template() {
	local TEMPLATE="$1"
	local OUTPUT="$2"
	
	# Start with the template
	local SKIPPING=0
	(IFS="ยง"; while read -r line; do
		if [[ "${line}" =~ ^[[:blank:]]*$ ]]; then
			# Skip empty lines
			continue
		elif [[ "${line}" =~ ^(.*)[[:blank:]]*![[:blank:]]*ONLY\ (.*)[[:blank:]]*$ ]]; then
			local WE_MATCH=0
			line="${BASH_REMATCH[1]}"
			for MATCH_PART in `echo "${BASH_REMATCH[2]}" | tr '|' 'ยง'`; do
				for POSSIBLE_MATCH in "${POSSIBLE_MATCHES[@]}"; do
					if [[ "${MATCH_PART}" == "${POSSIBLE_MATCH}" ]]; then
						WE_MATCH=1
						break
					fi
				done
				if [ "${WE_MATCH}" -eq "1" ]; then
					break
				fi
			done
			if [[ $WE_MATCH -eq 0 ]]; then
				# Skip line
				continue
			fi
		elif [[ "${line}" =~ ^[[:blank:]]*--END--[[:blank:]]*$ ]]; then
			# Stop skipping
			SKIPPING=0
			continue
		elif [[ "${line}" =~ ^[[:blank:]]*--ONLY\ (.*)--[[:blank:]]*$ ]]; then
			WE_MATCH=0
			for MATCH_PART in `echo "${BASH_REMATCH[1]}" | tr '|' 'ยง'`; do
				for POSSIBLE_MATCH in "${POSSIBLE_MATCHES[@]}"; do
					if [[ "${MATCH_PART}" == "${POSSIBLE_MATCH}" ]]; then
						WE_MATCH=1
						break
					fi
				done
				if [ "${WE_MATCH}" -eq "1" ]; then
					break
				fi
			done
			if [[ $WE_MATCH -eq 0 ]]; then
				# Start skipping
				SKIPPING=1
			fi
			continue
		fi
		
		if [[ $SKIPPING -eq 0 ]]; then
			eval echo "\\${line}"
		fi
	done; ) < ${TEMPLATE} > ${OUTPUT}
}

BASE_DIR="../working"
MODE_DIR="cfg-${MODE}"

echo -n "- Basic configuration:"
for SWITCH in `seq 1 2`; do
	DIR="${BASE_DIR}/SW${SWITCH}/${MODE_DIR}"
	mkdir -p "${DIR}"
	
	TPL="templates/core-switch.cfg"
	CFG="SWITCH.cfg"
	echo -n " SW${SWITCH}:${CFG}"

	set_possible_matches "X" "SW${SWITCH}"
	process_template "${TPL}" "${DIR}/${CFG}"
done

for TRANSIT in `seq 1 2`; do
	DIR="${BASE_DIR}/TRANSIT${TRANSIT}/${MODE_DIR}"
	mkdir -p "${DIR}"
	
	TPL="templates/transit-router.cfg"
	CFG="TRANSIT.cfg"
	echo -n " TRANSIT${TRANSIT}:${CFG}"

	set_possible_matches "X" "TRANSIT${TRANSIT}"
	process_template "${TPL}" "${DIR}/${CFG}"
done
echo ""

for POP in `seq 1 ${POP_COUNT}`; do
	DIR="${BASE_DIR}/POP${POP}/${MODE_DIR}"
	mkdir -p "${DIR}"
	
	echo "- POP ${POP}:"
	echo -n "  - Basic configuration:"
	for ROUTER in `seq 1 3`; do
		TPL="templates/pop-router.cfg"
		CFG="R${ROUTER}.cfg"
		echo -n " POP${POP}:${CFG}"
		
		set_possible_matches "${POP}" "R${ROUTER}"
		process_template "${TPL}" "${DIR}/${CFG}"
	done
	echo ""

	echo -n "  - Customer configuration:"
	for CUSTOMER in `seq 1 2`; do
		TPL="templates/pop-customer.cfg"
		CFG="CUST${CUSTOMER}.cfg"
		echo -n " POP${POP}:${CFG}"
		
		set_possible_matches "${POP}" "CUST${CUSTOMER}"
		process_template "${TPL}" "${DIR}/${CFG}"
	done
	echo ""
done

echo ""
